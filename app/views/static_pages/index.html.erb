<head>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>

</head>
<body>

<header>
<div id="title">Radiance</div>
<div id="spoiler">A Labyrinth Game</h2>
 
</header>

<section id="viewport">
  <div id="border" class="corner left top"></div>
  <div id="border" class="corner right top"></div>
  <div id="border" class="corner left bottom"></div>
  <div id="border" class="corner right bottom"></div>
  <div id="border" class="wallUpDown left"></div>
  <div id="border" class="wallUpDown right"></div>
  <div id="border" class="wallLeftRight top"></div>
  <div id="border" class="wallLeftRight bottom"></div>

  <div class="mainView"></div>
  
  <img src="../assets/mainDoor.png" class="tempWalls" id="mainWall" />
  <img src="../assets/sideWall.png" class="tempWalls" id="leftWall" />
  <img src="../assets/sideDoor.png" class="tempWalls" id="leftDoor" />
  <img src="../assets/sideWall.png" class="tempWalls" id="rightWall" />
  <img src="../assets/sideDoor.png" class="tempWalls" id="rightDoor" />

  <div id="startMaze" class="mainView">
    <div onclick="initilizeMaze()">> Start?</div>
    <div class="instructions">Please use the WASD keys on your keyboard to move forward through doorwars, and to turn left and right in the Labyrinth.</div>
  </div>

</section>

<%# <section class="todoapp">
  <header class="header">
    <h1>Maze Generator</h1>
  </header>
  <section id="viewportTemp">
    <input type="submit" value="Init" onclick="endStart(); currLocation = Mstart"> <br />
    <div class="currLoc"></div><div class="currFacing"></div>
    <br />
    <div class="forward"></div>
    <br />
    <div class="left"></div>
    <div class="right"></div>
    <br />
    <input type="submit" value="Forward" onclick="Forward()"> <br />
    <input type="submit" value="Rotate Left" onclick="rotate('left')">
    <input type="submit" value="Rotate Right" onclick="rotate('right')">
  
  
  </section>
  
  <br />
  <input type="text" id="X">
  <input type="text" id="Y">
  <input type="submit" value="neighbors" onclick="neighbors()">
  <br />
  <input type="submit" value="New Maze" onclick="$('#theMaze').empty();mazeCreate()">
  <input type="submit" value="Maze Display" onclick="mazeDisplay(map);">
  <input type="submit" value="The Path" onclick="pathing(Mstart)">

  <section id="theMaze">
  </section> %>

</section>
<br />

<style>
body {
  background-image: url('assets/viewportMain.png');
  color: gold;
}

header {
  font-family: 'neverwinter_normal', sans-serif;
  text-shadow: 2px 2px 5px #8b8b53;
  padding-bottom: 25px;
}

#title {
  position: relative;
  font-size: 5em;
  padding-left: 30px;
  padding-top: 15px;
  letter-spacing: -1px;
}
#spoiler {
  font-family: 'gold_box_gamesregular', sans-serif;
  
  position: relative;
  left: -150px;
  top: 20px;

}

.instructions {
  margin-top: 158px;
  margin-left: 88px;
  margin-right: 70px;
}

#viewport {
  margin-left: auto;
  margin-right: auto;
  margin-top: 0px;
  margin-bottom: 0px;
  padding: 0px 0px 0px 0px;
  width: 880px;
  height: 780px;
  position: relative;
}

#startMaze {
  font-family: 'pc_seniorregular', sans-serif;
  z-index: 15;
}

@keyframes blink { 
   50% { border-color: #8b8b53; } 
}

#startMaze div:first-child {
  font-size: 2em;
  margin-top: 300px;
  margin-left: 220px;
  border-bottom: 2px solid;
  animation: blink .5s step-end infinite alternate;
}

#startMaze div:first-child:hover{
  cursor: pointer;
}

#viewport * {
  position: absolute;
}

.centerView {
  background-image: url('assets/viewportCenterWall.png');
  background-position: 0px -50px;
  width: 720px;
  height: 620px;

}

#viewport .corner {
  position: absolute;
  background-image: url('assets/viewportCorner.png');
  width: 80px;
  height: 80px;
}

#viewport #border {
  z-index: 10;
}
#viewport .left {
  left: 0px;
}

#viewport .bottom {
  bottom: 0px;
}

#viewport .right {
  right: 0px;
}

#viewport .top {
  top: 0px;
}

#viewport .wallLeftRight {
  background-image: url('assets/viewportLR.png');
  width: 720px;
  height: 80px;
  left: 80px;
}

#viewport .wallUpDown {
  background-image: url('assets/viewportTB.png');
  width: 80px;
  height: 620px;
  top: 80px;
}

#viewport .mainView {
  background-image: url('assets/viewportMain.png');
  background-position: 0px -50px;
  top: 80px;
  left: 80px;
  width: 720px;
  height: 620px;
}

.tempWalls {
  position: absolute;
  z-index: 5;
  top: 30px;
  left: 80px;
  width: 720px;
  height: 721px;
}

#viewport #rightWall {
  -moz-transform: scaleX(-1);
  -o-transform: scaleX(-1);
  -webkit-transform: scaleX(-1);
  transform: scaleX(-1);
}

#viewport #rightDoor {
  -moz-transform: scaleX(-1);
  -o-transform: scaleX(-1);
  -webkit-transform: scaleX(-1);
  transform: scaleX(-1);
}

.invisable {
  opacity: 0;
}

#viewportTemp div {
  border-style: solid;
  border-width: 1px;
  height: 1.5em;
}

#viewportTemp div {
  border-style: solid;
  border-width: 1px;
  height: 1.5em;
}

.forward {
  width: 106px;
}
.left, .right {
  width: 50px;
}

div {
  display: inline-block;
  padding: 0px 0px 0px 0px;
  margin: 0px 0px 0px 0px;
}
.mazeRow {
  display: block;

}
.mazeColumn {
  display: inline-block;
  width: 50px;
  height: 50px;
}
.Red {
  background-color: Red;
}
.Green {
  background-color: Green;
}

.Pathed {
  color: blue
}
</style>


<script>
let map = [];
let Mstart = [];
let Mend = [];
let neighborsFound = {};
let shortestPath = [];
let currLocation = [];
let facing = "north";

initilizeMaze = function() {
  endStart();
  currLocation = Mstart;
  hideAll();
  // use currLocation to start the player facing a door
  // find neightbors?
  nearestDoor = neighbors(currLocation[0],currLocation[1]);
  console.log(nearestDoor);
  rotate('right');
  $("#startMaze").hide(500);
};

hideAll = function() {
  $("#mainWall").hide();
  $("#leftWall").hide();
  $("#leftDoor").hide();
  $("#rightWall").hide();
  $("#rightDoor").hide();
};

revealDoors = function() {
  hideAll();
  if (nextRooms[facing] != false) {
    // $(".forward").text("Room");
    $("#mainWall").show(200);
  } else {
    // $(".forward").text("Wall");
  }
  if (nextRooms[rotateCheck("left")] != false) {
    // $(".left").text("Room");
    $("#leftDoor").show(200);
  } else {
    // $(".left").text("Wall");
    $("#leftWall").show(200);
  }
  if (nextRooms[rotateCheck("right")] != false) {
    // $(".right").text("Room");
    $("#rightDoor").show(200);
  } else {
    // $(".right").text("Wall");
    $("#rightWall").show(200);
  }

}

$(function() {
  mazeCreate();
  $(window).keypress(function(e) {
    var ev = e || window.event;
    var key = ev.keyCode || ev.which;
    //do stuff with "key" here...
    //  var new_div = $('<div/>');
    //  new_div.hide();
    //  new_div.css('color', 'darkgreen');
    //  new_div.html('key code ' + key + ' was pressed!');      
    //  $('body').append(new_div);
    //  new_div.fadeIn();
    if (key == 97) {
      //console.log("A");
      rotate('left');
    } else if(key == 100) {
      //console.log("D");
      rotate('right');
    } else if(key == 119) {
      //console.log("W");
      Forward();
    }
   });
});



Forward = function () {
  // use facing to determain the looking direction to see where forward next is 
  direction = {
    'north' : [-1,0],
    'east' : [0,1],
    'west' : [0,-1],
    'south' : [1,0]
  };
  nextDirect = direction[facing];
  let nextLocation = [];
  nextLocation[0] = nextDirect[0] + currLocation[0];
  nextLocation[1] = nextDirect[1] + currLocation[1];
  if (map[nextLocation[0]][nextLocation[1]] == true) {
    currLocation[0] = nextLocation[0];
    currLocation[1] = nextLocation[1];
    nextRooms = neighbors(nextLocation[0],nextLocation[1]);
    $(".currFacing").text(facing);
    $(".currLoc").text(currLocation[0] + ", " + currLocation[1]);
    revealDoors();
  }
  if (currLocation[0] == Mend[0] && currLocation[1] == Mend[1]) {
    //console.log("The End");
    $("#startMaze div:first-child").text("> Restart?");
    $(".instructions").text("You Won!");
    $("#startMaze").show();
  }
};

rotate = function (lorr) {
  facing = rotateCheck(lorr); 
  nextRooms = neighbors(currLocation[0],currLocation[1]);
  $(".currLoc").text(currLocation[0] + ", " + currLocation[1]);
  $(".currFacing").text(facing);
  revealDoors();
  
};

rotateCheck = function (lorr, looking = facing) {
  // lorr = Left or Right
  switch(looking) {
  case "north":
    // code block
    if(lorr == "left") {
      return "west";
    } else {
      return "east";
    }
    break;
  case "east":
    // code block
    if(lorr == "left") {
      return "north";
    } else {
      return "south";
    }
    break;
  case "south":
    // code block
    if(lorr == "left") {
      return "east";
    } else {
      return "west";
    }
    break;
  case "west":
    // code block
    if(lorr == "left") {
      return "south";
    } else {
      return "north";
    }
    break;
  default:
    // code block
  }
};

pathing = function (newSquare, prevPath = []) {
  // let starting = neighbors(Mstart[0],Mstart[1]);
  let newNeighbors = neighbors(newSquare[0],newSquare[1]);
  prevPath.push([newSquare[0],newSquare[1]]);
  let directions = ["north","east","south","west"];
  // object crawler
  for (let eachDir = 0; eachDir < directions.length; eachDir++) {
    const currDir = directions[eachDir];
    const dirVal = newNeighbors[currDir];
    if(dirVal != false) {
      if(indexOfForArrays(prevPath,Mend) != -1) {
        // The path has found the end.
        shortestPath = prevPath;
        turnBlue(prevPath);
        return prevPath;
      } else if(indexOfForArrays(prevPath,dirVal) == -1) {
        // pathStack.push(dirVal);
        setTimeout(pathing([dirVal[0],dirVal[1]],prevPath),2000)
      };
    };
  };
};

turnBlue = function (pathStack) {
  for (let allOfThem = 0; allOfThem < pathStack.length; allOfThem++) {
    const element = pathStack[allOfThem]; // in an array [Y,X]
    // :nth-child(n)
    // .mazeRow
    // .mazeColumn 
    rowSelecter = ".mazeRow:nth-child(" + (parseInt(element[0]) + 1) + ")";
    columnSelecter = rowSelecter + ">.mazeColumn:nth-child(" + (parseInt(element[1]) + 1) + ")";
    $(columnSelecter).addClass("Pathed");
  }

};


neighbors = function (Y, X) {
  if (typeof X == 'undefined') X = parseInt($("#X").val(), 10);
  if (typeof Y == 'undefined') Y = parseInt($("#Y").val(), 10);
  // log the value of north, east, south, and west squares based of inputted x & y
  neighborsFound = {
    north : [],
    east  : [],
    south : [],
    west  : []
  };
  // North Y cant be lower then 0
      if((Y - 1) >= 0 && map[Y - 1][X] == true) {
        neighborsFound.north = [(Y - 1),X];
      } else {
        neighborsFound.north = false;
      };
      // East - X can not be larger or equal to map[0].length
      if((X + 1) < map[0].length && map[Y][X + 1] == true) {
        neighborsFound.east = [Y,(X + 1)];
      } else {
        neighborsFound.east = false;
      };
      // South - Y can not be larger or equal to map.length
      if((Y + 1) < map.length && map[Y + 1][X] == true) {
        neighborsFound.south = [(Y + 1),X];
      } else {
        neighborsFound.south = false;
      };
      // West - X must be larger or equal to 0
      if((X - 1) >= 0 && map[Y][X - 1] == true) {
        neighborsFound.west = [Y,(X - 1)];
      } else {
        neighborsFound.west = false;
      };
  // console.log("North - " + neighborsFound.north + ": East - " + neighborsFound.east + ": South - " + neighborsFound.south + ": West - " + neighborsFound.west);
  return neighborsFound;
};

endStart = function () {
  Mstart[0] = [0];
  Mend[0] = [0];
  foundS = false;
  foundE = false;
  x = 0;
  y = 0;
  while (!foundS) {
    if (map[y][x]) {
      Mstart[0] = y;
      Mstart[1] = x;
      foundS = true;
    }
    x++;
    if (x >= map.length) {
      x = 0
      y++;
    }
  };
  x = map[0].length - 1;
  y = map.length - 1;
  while (!foundE) {
    if (map[y][x]) {
      Mend[0] = y;
      Mend[1] = x;
      foundE = true;
    }
    x--;
    if(x <= 0) {
      x = map[0].length - 1;
      y--;
    }
  }
};

mazeDisplay = function(printMaze) {
  // theMaze should be an array with several arrays inside of it. 
  var currentRow;
  for (currentRow = 0; currentRow < printMaze.length; currentRow++) {
    var newRow = $("<div></div>").addClass("mazeRow");
    var currentColumn;
    for (currentColumn = 0; currentColumn < printMaze[currentRow].length; currentColumn++) {
      var newColumn = $("<div></div>");
      newColumn.addClass("mazeColumn");
      currRoom = printMaze[currentRow][currentColumn];
      if(currRoom != '0' && currRoom != '?') {
        newColumn.addClass("Green");
      } else {
        newColumn.addClass("Red");
      }
      newRow.append(newColumn.text(currRoom));
    }
    $("#theMaze").append(newRow);
  } 
}

mazeCreate = function(width = 5, height = 5){
  // Maze adapted from Gabriel Valfridsson's CodePen :: https://codepen.io/GabbeV/pen/viAec 
  x = width/2|0       //Horisontal starting position
  y = height/2|0      //Vertical starting position
  // INIT
  map = []
  for(var i=0;i<height*2;i++){
    map[i] = []
    for(var j=0;j<width*2;j++){
      map[i][j] = false
    }
  }
  map[y*2][x*2] = true
  route = [[x,y]]
  
  loop();
};

loop = function(){
  x = route[route.length-1][0]|0
  y = route[route.length-1][1]|0
  var directions = [[1,0],[-1,0],[0,1],[0,-1]]
  var alternatives = []
  
  for(var i=0;i<directions.length;i++){
    if(map[(directions[i][1]+y)*2]!=undefined && map[(directions[i][1]+y)*2][(directions[i][0]+x)*2]===false){
      alternatives.push(directions[i])
    }
  }
  
  if(alternatives.length===0){
    route.pop()
    if(route.length>0){
      timer = setTimeout(loop,1)
    }
    return;
  }
  direction = alternatives[Math.random()*alternatives.length|0]
  route.push([direction[0]+x,direction[1]+y])
  map[(direction[1]+y)*2][(direction[0]+x)*2] = true
  map[direction[1]+y*2][direction[0]+x*2] = true
  timer = setTimeout(loop,1)
  routeMaze = route;
};


// CODE FROM STACK OVERFLOW --- https://stackoverflow.com/questions/6315180/javascript-search-array-of-arrays
Array.prototype.indexOfForArrays = function(search)
{
  var searchJson = JSON.stringify(search); // "[3,566,23,79]"
  var arrJson = this.map(JSON.stringify); // ["[2,6,89,45]", "[3,566,23,79]", "[434,677,9,23]"]

  return arrJson.indexOf(searchJson);
  // CALL WITH BELOW FUNCTION 
  // *** arr.indexOfForArrays([3,566,23,79]);
  // *** 1
};
indexOfForArrays = function (main, index) {
  var searchJson = JSON.stringify(index);
  var arrJson = main.map(JSON.stringify);
  debug = arrJson.indexOf(searchJson);
  return debug;
}


</script>
</body>